#!/bin/sh

usage() {
    echo 'usage: bolt build [-c|--config CONFIG_DIR] [-o|--output OUTPUT_DIR] [-s|--src-dir SRC_DIR]'
    echo '                  [-i|--inline] [-n|--invoke-main MAIN_MODULE] [-r|--register]'
    echo '                  [-m|--modules] [-e|--entry-points FILE ...] [-g|--entry-group NAME FILE ...]'
    echo
    echo 'options:'
    echo '  -c|--config CONFIG_DIR         override bolt configuration directory'
    echo '                                   default: bolt/config'
    echo '  -o|--output OUTPUT_DIR         override output directory, note this is different'
    echo '                                 to the jsc compile directory, the compiled output,'
    echo '                                 will be located at $OUTPUT_DIR/compile'
    echo '                                   default: scratch/main/js'
    echo '  -s|--src-dir SRC_DIR           override source directory'
    echo '                                   default: src/main/js'
    echo '  -i|--inline                    enable generation of inline scripts (only produces output'
    echo '                                 in conjunction with -e or -g).'
    echo '  -n|--invoke-main MAIN_MODULE   specify main module of inline scripts.'
    echo '  -r|--register                  register modules in global namespace for inline scripts,'
    echo '                                 this will default to true unless -n is specified.'
    echo '  -m|--modules                   enable generation of flat module files.'
    echo '  -e|--entry-points FILE ...     specify a set of entry points, a compiled output'
    echo '                                 will be generated for each entry point. Multiple'
    echo '                                 -e flags may be specified.'
    echo '  -g|--entry-group NAME FILE ... specify an entry group, a single compiled output'
    echo '                                 will be generated with NAME for each entry-group.'
    echo '                                 Multiple -g flags may be specified.'
    echo
    echo 'example:'
    echo '  Produce a bolt build for a top level application. A compiled file will be'
    echo '  generated for each Main module in this example.'
    echo
    echo '    bolt build -e src/main/js/**/*Main.js'
    echo
    echo
    echo '  Produce a bolt build for a top level library. A self contained script registering'
    echo '  all modules in their namespace will be produced.'
    echo '    bolt build -i -g src/main/js/**/api/*.js'
    echo
    echo
    echo '  Produce a bolt build for a general purpose library, in this build we only want'
    echo '  modules to be produced, no compiled output.'
    echo '    bolt build -m src/main/js'
    echo
    echo
    echo 'note:'
    echo '  Examples assume use of a shell with "**" glob support. This means either zsh or'
    echo '  bash 4.x with `shopt -s globstar` set. If you are an insolent mac user with a'
    echo '  default bash 3.x, this tool strongly recommends you upgrade (although defenestration'
    echo '  of said mac is also a valid option).'
    echo
    echo '  If you become desperate something like $(find src/test/js/atomic -name \*.js) could be'
    echo '  used as a substitute.'
    echo
}

if [ "$help_mode" = true ]; then
    usage
    exit 0
fi

count_targets=0
count_entry_point=0
count_entry_group_name=0

while echo x"$1" | grep -q '^x-'; do
    flag="$1"; shift
    case "$flag" in
    -c|--config)
        if [ $# -lt 1 ]; then
            fail_usage 1 "$flag requires an argument to be specified"
        fi
        config_dir="$1"; shift
    ;;
    -o|--output)
        if [ $# -lt 1 ]; then
            fail_usage 1 "$flag requires an argument to be specified"
        fi
        output_dir="$1"; shift
    ;;
    -s|--src-dir)
        if [ $# -lt 1 ]; then
            fail_usage 1 "$flag requires an argument to be specified"
        fi
        src_dir="$1"; shift
    ;;
    -n|--invoke-main)
        if [ $# -lt 1 ]; then
            fail_usage 1 "$flag requires an argument to be specified"
        fi
        invoke_main_flag="-n $1"; shift
    ;;
    -r|--register)
        register_modules_flag="-r"
    ;;
    -i|--inline)
        generate_inline=true
    ;;
    -m|--modules)
        generate_modules=true
    ;;
    -e|--entry-points)
        while [ $# -gt 0 ] && echo x"$1" | grep -v -q '^x-'; do
            entry="$1"; shift
            if [ ! -f "$entry" ]; then
                fail 1 "specified file for entry point not found [$entry]"
            fi
            eval entry_point_$count_entry_point="$entry"
            count_entry_point=`expr $count_entry_point + 1`
        done
    ;;
    -g|--entry-group)
        if [ $# -lt 2 ]; then
            fail_usage 1 "$flag requires two arguments to be specified"
        fi
        name=$1; shift
        if echo "$name" | grep -q '/'; then
            fail 1 "entry group name must not contain special characters" >&2
        fi
        eval entry_group_name_$count_entry_group_name="$name"
        count_entry_group_name=`expr $count_entry_group_name + 1`

        eval count_entry_groups_${name}=0

        while [ $# -gt 0 ] && echo x"$1" | grep -v -q '^x-'; do
            file="$1"; shift
            if [ ! -f "$file" ]; then
                fail 1 "specified file for entry group not found [$file]"
            fi
            eval count='$count_entry_groups_'${name}
            eval entry_groups_${name}_${count}="$file"
            eval count_entry_groups_${name}=`expr $count + 1`
        done
    ;;
    --)
        break;
    ;;
    *)
        fail_usage 1 "invalid flag [$flag]"
    ;;
    esac
done

: ${config_dir:=bolt/config}
: ${output_dir:=scratch/main/js}
: ${src_dir:=src/main/js}
: ${generate_inline=false}
: ${generate_modules=false}

bolt_build_inline() {
    target="$1"
    name="$2"
    mkdir -p "$output_dir/inline"
    $base/jsc inline -c "$config_dir" $invoke_main_flag $register_modules_flag "$target" "$output_dir/inline/$name.js"
}

bolt_build_entry_point() {
    mkdir -p "$output_dir/compile"

    for i in `seq 1 $count_entry_point`; do
        # this little bit is just iterating through the array
        eval file='$entry_point_'`expr $i - 1`
        name=`$base/jsc identify "$file"`
        target="$output_dir/compile/$name.js"

        # this little bit is to push onto the targets array so things can be linked later
        eval targets_$count_targets=$target
        count_targets=`expr $count_targets + 1`

        $base/jsc compile -c "$config_dir" "$file" "$target"

        if [ "$generate_inline" = "true" ]; then
            bolt_build_inline "$target" "$name"
        fi
    done

}

bolt_build_entry_group() {
    mkdir -p "$output_dir/compile"

    for i in `seq 1 $count_entry_group_name`; do
        # this little bit is just iterating through the array
        eval name='$entry_group_name_'`expr $i - 1`
        target="$output_dir/compile/$name.js"

        # this little bit is to push onto the targets array so things can be linked later
        eval targets_$count_targets=$target
        count_targets=`expr $count_targets + 1`

        # build arguments to jsc compile
        set -- "$target"
        for j in `seq $count_entry_group_name -1 1`; do
            eval file='$entry_groups_'${name}'_'`expr $i - 1`
            set -- "$file" "$@"
        done
        $base/jsc compile -c "$config_dir" "$@"

        if [ "$generate_inline" = "true" ]; then
            bolt_build_inline "$target" "$name"
        fi
    done
}

bolt_link() {
    # this just builds up the arguments to jsc link into "$@" so they can be quoted correctly
    set -- "$output_dir/compile/bootstrap.js"
    for i in `seq $count_targets -1 1`; do
        eval file='$targets_'`expr $i - 1`
        set -- "$file" "$@"
    done
    $base/jsc link -c "$config_dir" "$@"
}

bolt_modules() {
     mkdir -p "$output_dir/module"
     module_dir=`cd "$output_dir/module" > /dev/null && pwd`
     (
        cd "$src_dir" > /dev/null
        # this munges the modules into their flat format: $src_dir/ephox/bob/package/Module.js -> $output_dir/modules/ephox.bob.package.Module.js
        find . -name \*.js -exec sh -c 'cp "$1" "$2"/`echo "$1" | sed -e "s:^./::g" -e "s:/:.:g"`' {} {} "$module_dir" \;
     )
}

if [ $count_entry_point -gt 0 ]; then
    bolt_build_entry_point
fi

if [ $count_entry_group_name -gt 0 ]; then
    bolt_build_entry_group
fi

if [ $count_targets -gt 0 ]; then
    bolt_link
fi

if [ "$generate_modules" = true ]; then
    bolt_modules
fi
