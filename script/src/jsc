#!/bin/sh

usage() {
    echo "usage: jsc dev      [-c|--config CONFIG_JS] [BOOTSTRAP_TARGET]"
    echo "    or jsc compile  [-c|--config CONFIG_JS] MODULE_FILE ... COMPILE_TARGET"
    echo "    or jsc identify MODULE_FILE"
    echo "    or jsc inline   [-c|--config CONFIG_JS] [-n|--invoke-main MAIN_MODULE] [-r|--register] COMPILE_FILE ... LINK_TARGET"
    echo "    or jsc link     [-c|--config CONFIG_JS] COMPILE_FILE ... LINK_TARGET"
    echo "    or jsc help"
    echo
    echo "arguments:"
    echo "  BOOTSTRAP_TARGET file to generate for running in dev mode, this defaults"
    echo "                   to a file called bootstrap.js in the same directory as"
    echo "                   the config file"
    echo "  MODULE_FILE      file containing an uncompiled module"
    echo "  COMPILE_TARGET   file to generate when compiling, will contain the set of"
    echo "                   modules and their dependencies"
    echo "  COMPILE_FILE     file produced by compilation to use as input to linking,"
    echo "                   COMPILE_FILE must have corresponding 'COMPILE_TARGET.meta'"
    echo "  LINK_TARGET      file to generate when linking, will contain bootstrap"
    echo "                   information: bolt, install and configuration"
    echo
    echo "options:"
    echo "  -c|--config CONFIG_JS          override bolt configuration file"
    echo "                                   default: config/bolt/prod.js"
    echo "  -o|--output OUTPUT_DIR         override compilation output directory"
    echo "                                   default: scratch/main/js/compile"
    echo "  -n|--invoke-main MAIN_MODULE   specify main module of inline scripts"
    echo "  -r|--register                  register modules in global namespace"
    echo
}

fail_usage() {
    echo $2 >&2
    echo >&2
    usage >&2
    exit $1
}

fail() {
    echo $2 >&2
    exit $1
}


base=`(readlink "$0" || printf "%s" "$0") | xargs dirname`

if [ $# -lt 1 ]; then
    fail_usage 1 "error: must specify mode."
fi

mode="$1"; shift

case "$mode" in
dev|compile|identify|inline|link|help)
    ;;
*)
    fail_usage 1 "invalid mode [$mode], must be one of dev|compile|identify|inline|link|help"
    ;;
esac

if [ "$mode" = help ]; then
  usage
  exit 0
fi

while echo x"$1" | grep -q '^x-'; do
    flag="$1"; shift
    case "$flag" in
    -c|--config)
        if [ $# -lt 1 ]; then
            fail_usage 1 "$flag requires an argument to be specified"
        fi
        config_js="$1"; shift
    ;;
    -o|--output)
        if [ $# -lt 1 ]; then
            fail_usage 1 "$flag requires an argument to be specified"
        fi
        output_dir="$1"; shift
    ;;
    -n|--invoke-main)
        if [ $# -lt 1 ]; then
            fail_usage 1 "$flag requires an argument to be specified"
        fi
        invoke_main=true
        main="$1"; shift
    ;;
    -r|--register)
        register_modules=true
    ;;
    --)
        break;
    ;;
    *)
        fail_usage 1 "invalid flag [$mode]"
    ;;
    esac
done

: ${config_js:=config/bolt/prod.js}
: ${output_dir:=scratch/main/js/compile}
: ${register_modules:=false}
: ${invoke_main:=false}

jsc_dev() {
    case $# in
    0) bootstrap="`dirname $config_js`/bootstrap.js" ;;
    1) bootstrap="$1" ;;
    *) fail_usage 1 "invalid number of arguments for jsc dev [$#]" ;;
    esac
    exec node $base/jsc.js "$mode" "$bootstrap" "$config_js"
}

jsc_x() {
    if [ $# -lt 2 ]; then
        fail_usage 1 "invalid number of arguments for jsc $mode [$#]"
    fi

    exec node $base/jsc.js "$mode" "$config_js" "$@"
}

jsc_compile() {
    jsc_x "$@"
}

jsc_identify() {
    if [ $# -ne 1 ]; then
        fail_usage 1 "invalid number of arguments for jsc $mode [$#]"
    fi

    exec node $base/jsc.js "$mode" "$1"
}

jsc_inline() {
    if [ $# -lt 2 ]; then
        fail_usage 1 "invalid number of arguments for jsc $mode [$#]"
    fi

    exec node $base/jsc.js "$mode" "$config_js" "$invoke_main" "$main" "$register_modules" "$@"
}

jsc_link() {
    jsc_x "$@"
}

if [ ! -f "$config_js" ]; then
    fail 1 "$config_js does not exist or is not a file"
fi

jsc_$mode "$@"
