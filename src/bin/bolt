#!/bin/sh

usage() {
    echo 'usage: bolt init  [-c|--config CONFIG_DIR] [-b|--bootstrap BOOTSTRAP_LINK]'
    echo '    or bolt build [-c|--config CONFIG_DIR] [-o|--output OUTPUT_DIR] [-s|--src-dir SRC_DIR] [-i|--inline]'
    echo '                  [-m|--modules] [-e|--entry-points FILE ...] [-g|--entry-group NAME FILE ...]'
    echo '    or bolt help'
    echo
    echo 'options:'
    echo '  -b|--bootstrap BOOTSTRAP_LINK  override bootstrap location,'
    echo '                                   default: bolt/bootstrap'
    echo '  -c|--config CONFIG_DIR         override bolt configuration directory'
    echo '                                   default: bolt/config'
    echo '  -o|--output OUTPUT_DIR         override output directory, note this is different'
    echo '                                 to the jsc compile directory, the compiled output,'
    echo '                                 will be located at $OUTPUT_DIR/compile'
    echo '                                   default: scratch/main/js'
    echo '  -s|--src-dir SRC_DIR           override source directory'
    echo '                                   default: src/main/js'
    echo '  -i|--inline                    enable generation of inline scripts (only produces output'
    echo '                                 in conjunction with -e or -g).'
    echo '  -m|--modules                   enable generation of flat module files.'
    echo '  -e|--entry-points FILE ...     specify a set of entry points, a compiled output'
    echo '                                 will be generated for each entry point. Multiple'
    echo '                                 -e flags may be specified.'
    echo '  -g|--entry-group NAME FILE ... specify an entry group, a single compiled output'
    echo '                                 will be generated with NAME for each entry-group.'
    echo '                                 Multiple -g flags may be specified.'
    echo
    echo 'example:'
    echo '  Produce a bolt build for a top level application. A compiled file will be'
    echo '  generated for each Main module in this example.'
    echo
    echo '    bolt build -e **/*Main.js'
    echo
    echo
    echo '  Produce a bolt build for a top level library. A self contained script registering'
    echo '  all modules in their namespace will be produced.'
    echo '    bolt build -i -g **/api/*.js'
    echo
    echo
    echo '  Produce a bolt build for a general purpose library, in this build we only want'
    echo '  modules to be produced, no compiled output.'
    echo '    bolt build -m src/main/js'
    echo
    echo
    echo 'note:'
    echo '  Examples assume use of a shell with "**" glob support. This means either zsh or'
    echo '  bash 4.0 with `shopt -s globstar` set. If you are an insolent mac user with the'
    echo '  default bash 3.x, this build tool strongly recommends you upgrade.'
    echo
}

fail_usage() {
    echo $2 >&2
    echo >&2
    usage >&2
    exit $1
}

fail() {
    echo $2 >&2
    exit $1
}


base=`dirname $0`

if [ $# -lt 1 ]; then
    fail_usage 1 "error: must specify mode."
fi

mode="$1"; shift

case "$mode" in
init|build|help)
    ;;
*)
    fail_usage 1 "invalid mode [$mode], must be one of init|build"
    ;;
esac

if [ "$mode" = help ]; then
    usage
    exit 0
fi

count_targets=0
count_entry_point=0
count_entry_group_name=0

while echo x"$1" | grep -q '^x-'; do
    flag="$1"; shift
    case "$flag" in
    -b|--bootstrap)
        if [ $# -lt 1 ]; then
            fail_usage 1 "$flag requires an argument to be specified"
        fi
        bootstrap_link="$1"; shift
    ;;
    -c|--config)
        if [ $# -lt 1 ]; then
            fail_usage 1 "$flag requires an argument to be specified"
        fi
        config_dir="$1"; shift
    ;;
    -o|--output)
        if [ $# -lt 1 ]; then
            fail_usage 1 "$flag requires an argument to be specified"
        fi
        output_dir="$1"; shift
    ;;
    -s|--src-dir)
        if [ $# -lt 1 ]; then
            fail_usage 1 "$flag requires an argument to be specified"
        fi
        src_dir="$1"; shift
    ;;
    -i|--inline)
        generate_inline=true
    ;;
    -m|--modules)
        generate_modules=true
    ;;
    -e|--entry-points)
        while [ $# -gt 0 ] && echo x"$1" | grep -v -q '^x-'; do
            entry="$1"; shift
            eval entry_point_$count_entry_point="$entry"
            count_entry_point=`expr $count_entry_point + 1`
        done
    ;;
    -g|--entry-group)
        if [ $# -lt 2 ]; then
            fail_usage 1 "$flag requires two arguments to be specified"
        fi
        name=$1; shift
        eval entry_group_name_$count_entry_group_name="$name"
        count_entry_group_name=`expr $count_entry_group_name + 1`

        eval count_entry_groups_${name}=0

        while [ $# -gt 0 ] && echo x"$1" | grep -v -q '^x-'; do
            file=$1; shift
            eval count='$count_entry_groups_'${name}
            eval entry_groups_${name}_${count}="$file"
            eval count_entry_groups_${name}=`expr $count + 1`
        done
    ;;
    --)
        break;
    ;;
    *)
        fail_usage 1 "invalid flag [$mode]"
    ;;
    esac
done

: ${bootstrap_link:=bolt/bootstrap}
: ${config_dir:=bolt/config}
: ${output_dir:=scratch/main/js}
: ${src_dir:=src/main/js}
: ${generate_inline=false}
: ${generate_modules=false}

bolt_init() {
    [ -d "$config_dir" ] || mkdir -p "$config_dir"
    [ -f "$config_dir/module.js" ] || cat > "$config_dir/module.js" <<EOF
configure({
  sources: [
  ]
});

EOF
    $base/jsc dev -c "$config_dir"
    $base/jsc mode -c "$config_dir" -b "$bootstrap_link" dev
}

bolt_build() {
    if [ $count_entry_point -gt 0 ]; then
        for i in `seq 1 $count_entry_point`; do
            eval file='$entry_point_'`expr $i - 1`
            name=`$base/jsc identify "$file"`
            target="$output_dir/compile/$name.js"
            eval targets_$count_targets=$target
            count_targets=`expr $count_targets + 1`
            mkdir -p "$output_dir/compile"
            $base/jsc compile -c "$config_dir" "$file" "$target"
            if [ "$generate_inline" = "true" ]; then
                mkdir -p "$output_dir/inline"
                $base/jsc inline -c "$config_dir" "$target" "$output_dir/inline/$name.inline.js"
            fi
        done
    fi

    if [ $count_entry_group_name -gt 0 ]; then
       for i in `seq 1 $count_entry_group_name`; do
           eval name='$entry_group_name_'`expr $i - 1`
           target="$output_dir/compile/$name.js"
           eval targets_$count_targets=$target
           count_targets=`expr $count_targets + 1`
           set -- "$target"
           for j in `seq $count_entry_group_name -1 1`; do
               eval file='$entry_groups_'${name}'_'`expr $i - 1`
               set -- "$file" "$@"
           done
           mkdir -p "$output_dir/compile"
           $base/jsc compile -c "$config_dir" "$@"
           if [ "$generate_inline" = "true" ]; then
               mkdir -p "$output_dir/inline"
               $base/jsc inline -c "$config_dir" "$target" "$output_dir/inline/$name.inline.js"
           fi
       done
    fi

    if [ $count_targets -gt 0 ]; then
        set -- "$output_dir/compile/bootstrap.js"
        for i in `seq $count_targets -1 1`; do
           eval file='$targets_'`expr $i - 1`
           set -- "$file" "$@"
        done
        $base/jsc link -c "$config_dir" "$@"
    fi

    if [ "$generate_modules" = true ]; then
         mkdir -p "$output_dir/module"
         module_dir=`cd "$output_dir/module" > /dev/null && pwd`
         (
            cd "$src_dir" > /dev/null
            find . -name \*.js -exec sh -c 'cp "$1" "$2"/`echo "$1" | sed -e "s:^./::g" -e "s:/:.:g"`' {} {} "$module_dir" \;
         )
    fi
}

bolt_$mode
