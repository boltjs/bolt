Spot
====

A Spot stores its location and the text value it represents. Spots are used for highlighting missing imports. The location acts as a safeguard to ensure that when the highlighting process has finished, if the location defined by the Spot no longer contains the right text, it can be ignored. Specifically, a Spot has three properties:

    Spot(token: String, begin: Int, end: Int)

* **token** the text value this Spot represents
* **begin**: the location of its start
* **end**: the location of its end


PlasmaText
===========

The PlasmaText is just a basic structure for maintaining two pieces of text. Its purpose is to allow processing of the text in a background thread.

    PlasmaText(deps: String, injs: String)

* **deps** the text contained within the dependency section
* **injs** the text contained within the injection section




ReadView
=========

When `live highlighting` was added to the `bolt plugin`, clear distinctions had to be made between events which interacted with the user interface, and those that didn't. The background processing of highlighting needs to be on a thread, but plugins are not permitted to read or write to the UI in a thread. Therefore, a readview is a cache of the pertinent user interface information for use in background processes. Make that clearer.

    ReadView(base: String, filename: String, nests: [Nest], module_name: String, 
      spots: [Spot], ptext: PlasmaText) 

* **base** this is the location which serves as the root of the project tree.
* **filename** this is the name of the current file being viewed.
* **nests** this is a list of possible locations and pathing routines for outlining potential positions of other modules.
* **module_name** this is the namespace of the current module (e.g. project.xxy.Main).
* **spot** this is a list of markers referring to possible module names in the current module. It is used for analysing and flagging imports.
* **ptext** the pair of text representing the dependency section and the injection section.

In summary, the ReadView must encompass any information that is required by a background thread but is part of the user interface.